{"npm":{"entity$":"-/-/npm_cache","id":"test","name":"test","urlRepo":"https://github.com/Gozala/test-commonjs.git","urlPkg":"https://www.npmjs.com/package/test","description":"(Un)CommonJS test runner.","latestVersion":"0.6.0","releaseCount":23,"dependencies":{"ansi-font":"0.0.2"},"author":{"name":"Irakli Gozalishvili","email":"rfobic@gmail.com"},"licence":"","maintainers":[{"name":"gozala","email":"rfobic@gmail.com"}],"readme":"# (Un)commonJS unit test runner\n\nImplementation of [(Un)commonJS unit test runner][UncommonJS unit test runner].\n\n[![build status](https://secure.travis-ci.org/Gozala/test-commonjs.png)](http://travis-ci.org/Gozala/test-commonjs)\n\n## Testing\n\nIn order to make your package testable from [npm] you should:\n\n- Create a directory in your package root.\n- Define test directory in package descriptor under `directories` section.\n- Define test script in package descriptor under `scripts` section.\n- Define dependency on this package (It's name is \"test\" in [npm] registry).\n- Write your tests\n- Test your package by running all tests `npm test`\n  or run individual tests `node ./path/to/test/group.js`\n\n## Example\n\n### package.json\n\n```js\n{\n  \"name\": \"mypackage\",\n  \"version\": \"0.7.0\",\n  \"description\": \"Sample package\",\n  \"scripts\": { \"test\": \"node test/all.js\" },\n  \"devDependencies\": { \"test\": \">=0.0.5\" }\n}\n```\n\n### Async test\n\n```js\n// if test function expects second named argument it will be executed\n// in async mode and test will be complete only after callback is called\nexports['test my async foo'] = function(assert, done) {\n  var http = require('http')\n  var google = http.createClient(80, 'www.jeditoolkit.com')\n  var request = google.request('GET', '/', {'host': 'www.jeditoolkit.com'})\n  request.end()\n  request.on('response', function (response) {\n    assert.equal(response.statusCode, 302, 'must redirect') // will log result\n    response.setEncoding('utf8')\n    response.on('data', function (chunk) {\n      assert.notEqual(chunk, 'helo world', 'must be something more inteligent')\n      done() // telling test runner that we're done with this test\n    })\n  })\n}\n\nif (module == require.main) require('test').run(exports)\n```\n\n### Sync test\n\n```js\n// using assert passed to the test function that just logs failures\nexports['test that logs all failures'] = function(assert) {\n  assert.equal(2 + 2, 5, 'assert failure is logged')\n  assert.equal(3 + 2, 5, 'assert pass is logged')\n}\n\nif (module == require.main) require('test').run(exports)\n```\n\n### Fast fail\n\n```js\n// using nodejs's build in asserts that throw on failure\nvar assert = require('assert')\n\nexports['test that stops execution on first failure'] = function() {\n  assert.equal(2 + 2, 5, 'assert fails and test execution stop here')\n  assert.equal(3 + 2, 5, 'will never pass this since test failed above')\n}\n\nif (module == require.main) require('test').run(exports)\n```\n\n### Custom assertions\n\n```js\nvar AssertBase = require('assert').Assert\nvar AssertDescriptor = {\n  constructor: { value: Assert },\n  inRange: { value: function (lower, inner, upper, message) {\n    if (lower < inner && inner < upper) {\n      this.fail({\n        actual: inner,\n        expected: lower + '> ' + ' < ' + upper,\n        operator: \"inRange\",\n        message: message\n      })\n    } else {\n      this.pass(message);\n    }\n  }, enumerable: true }\n}\nfunction Assert() {\n  return Object.create(AssertBase.apply(null, arguments), AssertDescriptor)\n}\n\n// bundling custom asserts with test suite\nexports.Assert = Assert\nexports['test with custom asserts'] = function(assert) {\n  assert.inRange(2, 3, 5, 'passes assert and logs')\n  assert.equal(3 + 2, 5, 'assert pass is logged')\n}\n\nif (module == require.main) require('test').run(exports)\n```\n\nFor more examples checkout tests for this package and for more details see\nthe [UncommonJS unit test runner] specification.\n\n[UncommonJS unit test runner]:https://github.com/kriskowal/uncommonjs/blob/master/tests/specification.md\n[npm]:http://npmjs.org/\n","homepage":"https://github.com/Gozala/test-commonjs/","cached":1462291605165},"name":"test","travis":{"entity$":"-/-/travis_cache","name":"test","url":"https://travis-ci.org/Gozala/test-commonjs","buildId":81252,"active":"","buildState":"passed","lastBuilt":"2012-12-28T19:19:36Z","cached":1462291605836,"id":"test"},"github":{"entity$":"-/-/github","name":"test-commonjs","user":"Gozala","repo":"test-commonjs","stars":16,"watches":3,"forks":5,"last":"2012-12-28T19:19:31Z","urlRepo":"https://github.com/Gozala/test-commonjs","urlClone":"git+https://github.com/Gozala/test-commonjs.git","urlSsh":"git@github.com:Gozala/test-commonjs.git","readme":"<h1>\n<a id=\"user-content-uncommonjs-unit-test-runner\" class=\"anchor\" href=\"#uncommonjs-unit-test-runner\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>(Un)commonJS unit test runner</h1>\n\n<p>Implementation of <a href=\"https://github.com/kriskowal/uncommonjs/blob/master/tests/specification.md\">(Un)commonJS unit test runner</a>.</p>\n\n<p><a href=\"http://travis-ci.org/Gozala/test-commonjs\"><img src=\"https://camo.githubusercontent.com/91971ce1ad358bcc62e0ad7b97bcfce7582f202e/68747470733a2f2f7365637572652e7472617669732d63692e6f72672f476f7a616c612f746573742d636f6d6d6f6e6a732e706e67\" alt=\"build status\" data-canonical-src=\"https://secure.travis-ci.org/Gozala/test-commonjs.png\" style=\"max-width:100%;\"></a></p>\n\n<h2>\n<a id=\"user-content-testing\" class=\"anchor\" href=\"#testing\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Testing</h2>\n\n<p>In order to make your package testable from <a href=\"http://npmjs.org/\">npm</a> you should:</p>\n\n<ul>\n<li>Create a directory in your package root.</li>\n<li>Define test directory in package descriptor under <code>directories</code> section.</li>\n<li>Define test script in package descriptor under <code>scripts</code> section.</li>\n<li>Define dependency on this package (It's name is \"test\" in <a href=\"http://npmjs.org/\">npm</a> registry).</li>\n<li>Write your tests</li>\n<li>Test your package by running all tests <code>npm test</code>\nor run individual tests <code>node ./path/to/test/group.js</code>\n</li>\n</ul>\n\n<h2>\n<a id=\"user-content-example\" class=\"anchor\" href=\"#example\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Example</h2>\n\n<h3>\n<a id=\"user-content-packagejson\" class=\"anchor\" href=\"#packagejson\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>package.json</h3>\n\n<div class=\"highlight highlight-source-js\"><pre>{\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>name<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>mypackage<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>version<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.7.0<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>description<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Sample package<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>scripts<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> { <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>node test/all.js<span class=\"pl-pds\">\"</span></span> },\n  <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>devDependencies<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> { <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>test<span class=\"pl-pds\">\"</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>&gt;=0.0.5<span class=\"pl-pds\">\"</span></span> }\n}</pre></div>\n\n<h3>\n<a id=\"user-content-async-test\" class=\"anchor\" href=\"#async-test\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Async test</h3>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// if test function expects second named argument it will be executed</span>\n<span class=\"pl-c\">// in async mode and test will be complete only after callback is called</span>\n<span class=\"pl-c1\">exports</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>test my async foo<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">assert</span>, <span class=\"pl-smi\">done</span>) {\n  <span class=\"pl-k\">var</span> http <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>http<span class=\"pl-pds\">'</span></span>)\n  <span class=\"pl-k\">var</span> google <span class=\"pl-k\">=</span> <span class=\"pl-smi\">http</span>.<span class=\"pl-en\">createClient</span>(<span class=\"pl-c1\">80</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>www.jeditoolkit.com<span class=\"pl-pds\">'</span></span>)\n  <span class=\"pl-k\">var</span> request <span class=\"pl-k\">=</span> <span class=\"pl-smi\">google</span>.<span class=\"pl-en\">request</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>GET<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>/<span class=\"pl-pds\">'</span></span>, {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>host<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>www.jeditoolkit.com<span class=\"pl-pds\">'</span></span>})\n  <span class=\"pl-smi\">request</span>.<span class=\"pl-en\">end</span>()\n  <span class=\"pl-smi\">request</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>response<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">response</span>) {\n    <span class=\"pl-smi\">assert</span>.<span class=\"pl-en\">equal</span>(<span class=\"pl-smi\">response</span>.<span class=\"pl-smi\">statusCode</span>, <span class=\"pl-c1\">302</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>must redirect<span class=\"pl-pds\">'</span></span>) <span class=\"pl-c\">// will log result</span>\n    <span class=\"pl-smi\">response</span>.<span class=\"pl-en\">setEncoding</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>utf8<span class=\"pl-pds\">'</span></span>)\n    <span class=\"pl-smi\">response</span>.<span class=\"pl-en\">on</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>data<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">chunk</span>) {\n      <span class=\"pl-smi\">assert</span>.<span class=\"pl-en\">notEqual</span>(chunk, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>helo world<span class=\"pl-pds\">'</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>must be something more inteligent<span class=\"pl-pds\">'</span></span>)\n      <span class=\"pl-en\">done</span>() <span class=\"pl-c\">// telling test runner that we're done with this test</span>\n    })\n  })\n}\n\n<span class=\"pl-k\">if</span> (<span class=\"pl-c1\">module</span> <span class=\"pl-k\">==</span> <span class=\"pl-smi\">require</span>.<span class=\"pl-smi\">main</span>) <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>test<span class=\"pl-pds\">'</span></span>).<span class=\"pl-en\">run</span>(<span class=\"pl-c1\">exports</span>)</pre></div>\n\n<h3>\n<a id=\"user-content-sync-test\" class=\"anchor\" href=\"#sync-test\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Sync test</h3>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// using assert passed to the test function that just logs failures</span>\n<span class=\"pl-c1\">exports</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>test that logs all failures<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">assert</span>) {\n  <span class=\"pl-smi\">assert</span>.<span class=\"pl-en\">equal</span>(<span class=\"pl-c1\">2</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>assert failure is logged<span class=\"pl-pds\">'</span></span>)\n  <span class=\"pl-smi\">assert</span>.<span class=\"pl-en\">equal</span>(<span class=\"pl-c1\">3</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>assert pass is logged<span class=\"pl-pds\">'</span></span>)\n}\n\n<span class=\"pl-k\">if</span> (<span class=\"pl-c1\">module</span> <span class=\"pl-k\">==</span> <span class=\"pl-smi\">require</span>.<span class=\"pl-smi\">main</span>) <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>test<span class=\"pl-pds\">'</span></span>).<span class=\"pl-en\">run</span>(<span class=\"pl-c1\">exports</span>)</pre></div>\n\n<h3>\n<a id=\"user-content-fast-fail\" class=\"anchor\" href=\"#fast-fail\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Fast fail</h3>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// using nodejs's build in asserts that throw on failure</span>\n<span class=\"pl-k\">var</span> assert <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>assert<span class=\"pl-pds\">'</span></span>)\n\n<span class=\"pl-c1\">exports</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>test that stops execution on first failure<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>() {\n  <span class=\"pl-smi\">assert</span>.<span class=\"pl-en\">equal</span>(<span class=\"pl-c1\">2</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>assert fails and test execution stop here<span class=\"pl-pds\">'</span></span>)\n  <span class=\"pl-smi\">assert</span>.<span class=\"pl-en\">equal</span>(<span class=\"pl-c1\">3</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>will never pass this since test failed above<span class=\"pl-pds\">'</span></span>)\n}\n\n<span class=\"pl-k\">if</span> (<span class=\"pl-c1\">module</span> <span class=\"pl-k\">==</span> <span class=\"pl-smi\">require</span>.<span class=\"pl-smi\">main</span>) <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>test<span class=\"pl-pds\">'</span></span>).<span class=\"pl-en\">run</span>(<span class=\"pl-c1\">exports</span>)</pre></div>\n\n<h3>\n<a id=\"user-content-custom-assertions\" class=\"anchor\" href=\"#custom-assertions\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Custom assertions</h3>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> AssertBase <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>assert<span class=\"pl-pds\">'</span></span>).<span class=\"pl-smi\">Assert</span>\n<span class=\"pl-k\">var</span> AssertDescriptor <span class=\"pl-k\">=</span> {\n  <span class=\"pl-en\">constructor</span>: { value: Assert },\n  inRange: { value: <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">lower</span>, <span class=\"pl-smi\">inner</span>, <span class=\"pl-smi\">upper</span>, <span class=\"pl-smi\">message</span>) {\n    <span class=\"pl-k\">if</span> (lower <span class=\"pl-k\">&lt;</span> inner <span class=\"pl-k\">&amp;&amp;</span> inner <span class=\"pl-k\">&lt;</span> upper) {\n      <span class=\"pl-v\">this</span>.<span class=\"pl-en\">fail</span>({\n        actual<span class=\"pl-k\">:</span> inner,\n        expected<span class=\"pl-k\">:</span> lower <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>&gt; <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span> &lt; <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> upper,\n        operator<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>inRange<span class=\"pl-pds\">\"</span></span>,\n        message<span class=\"pl-k\">:</span> message\n      })\n    } <span class=\"pl-k\">else</span> {\n      <span class=\"pl-v\">this</span>.<span class=\"pl-en\">pass</span>(message);\n    }\n  }, enumerable<span class=\"pl-k\">:</span> <span class=\"pl-c1\">true</span> }\n}\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">Assert</span>() {\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">Object</span>.<span class=\"pl-en\">create</span>(<span class=\"pl-smi\">AssertBase</span>.<span class=\"pl-c1\">apply</span>(<span class=\"pl-c1\">null</span>, arguments), AssertDescriptor)\n}\n\n<span class=\"pl-c\">// bundling custom asserts with test suite</span>\n<span class=\"pl-c1\">exports</span>.<span class=\"pl-smi\">Assert</span> <span class=\"pl-k\">=</span> Assert\n<span class=\"pl-c1\">exports</span>[<span class=\"pl-s\"><span class=\"pl-pds\">'</span>test with custom asserts<span class=\"pl-pds\">'</span></span>] <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span>(<span class=\"pl-smi\">assert</span>) {\n  <span class=\"pl-smi\">assert</span>.<span class=\"pl-en\">inRange</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>passes assert and logs<span class=\"pl-pds\">'</span></span>)\n  <span class=\"pl-smi\">assert</span>.<span class=\"pl-en\">equal</span>(<span class=\"pl-c1\">3</span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">5</span>, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>assert pass is logged<span class=\"pl-pds\">'</span></span>)\n}\n\n<span class=\"pl-k\">if</span> (<span class=\"pl-c1\">module</span> <span class=\"pl-k\">==</span> <span class=\"pl-smi\">require</span>.<span class=\"pl-smi\">main</span>) <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>test<span class=\"pl-pds\">'</span></span>).<span class=\"pl-en\">run</span>(<span class=\"pl-c1\">exports</span>)</pre></div>\n\n<p>For more examples checkout tests for this package and for more details see\nthe <a href=\"https://github.com/kriskowal/uncommonjs/blob/master/tests/specification.md\">UncommonJS unit test runner</a> specification.</p>\n","pullRequests":2,"cached":1462291606719,"id":"test"}}