{"npm":{"entity$":"-/-/npm_cache","id":"nodezoo","name":"nodezoo","urlRepo":"git://github.com/rjrodger/nodezoo.git","urlPkg":"https://www.npmjs.com/package/nodezoo","description":"nodezoo","latestVersion":"0.0.2","releaseCount":2,"dependencies":{"express":"3.x","underscore":"*","dispatch":"0.2.x","ejs":"*","request":">=2.12.0","node-logentries":">=0.0.2","seneca":"0.4.2"},"author":{"name":"Richard Rodger","email":""},"licence":"MIT","maintainers":[{"name":"rjrodger","email":"richard.rodger@nearform.com"}],"readme":"nodezoo\n=======\n\nA search engine for Node.js modules - visit: (nodezoo.com)[http://nodezoo.com]\n\nThis is a web app, command line utility, and module. \n\n\n```sh\nnpm install -g nodezoo\n```\n\nAnd then:\n\n```sh\nnodezoo foo\n```\n\nAnd also:\n\n```javascript\nvar nodezoo = require('nodezoo')()\n\nnodezoo.query({q:'foo'},function(err, results ){\n  console.dir(results)\n})\n```\n\nYou'll need network access to http://nodezoo.com for this work, of course.\n\n\nmore docs to come...\n\n\n\n\n","homepage":"","cached":1462291772637},"name":"nodezoo","github":{"entity$":"-/-/github","name":"nodezoo","user":"rjrodger","repo":"nodezoo","stars":103,"watches":15,"forks":54,"last":"2016-04-25T15:34:59Z","urlRepo":"https://github.com/rjrodger/nodezoo","urlClone":"git+https://github.com/rjrodger/nodezoo.git","urlSsh":"git@github.com:rjrodger/nodezoo.git","readme":"<p><a href=\"https://raw.githubusercontent.com/nodezoo/nodezoo-org/master/assets/logo-nodezoo.png\" target=\"_blank\"><img src=\"https://raw.githubusercontent.com/nodezoo/nodezoo-org/master/assets/logo-nodezoo.png\" alt=\"Nodezoo\" style=\"max-width:100%;\"></a></p>\n\n<h1>\n<a id=\"user-content-nodezoo-workshop\" class=\"anchor\" href=\"#nodezoo-workshop\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>nodezoo-workshop</h1>\n\n<ul>\n<li>\n<strong>Lead:</strong> <a href=\"https://github.com/rjrodger\">Richard Rodger</a>\n</li>\n<li>\n<strong>Sponsor:</strong> <a href=\"http://www.nearform.com/\">nearForm</a>\n</li>\n</ul>\n\n<p>A workshop for the <a href=\"http://nodezoo.com\">nodezoo</a> project. Nodezoo is a search engine for\n<a href=\"http://nodejs.org\">Node.js</a> modules. The nodezoo search engine is an example of a real-world\nservice built using Node.js microservices. Each microservice is published in its own github\nrepository along with all of the necessary config to run the system locally or live . The codebase\nis intended to be used as an example, and as a starting point for your own projects.</p>\n\n<p>Below we provide a complete workshop to work through. Our current live system has it's roots in\nthis workshop. By working through the iterations below you can get a feel for how a microservice\nsystem is bootstrapped together and how the system evolves as needs change.</p>\n\n<p><strong>Note:</strong> This repo contains the nodezoo workshop, to explore and run the live version of nodezoo,\nplease see <a href=\"https://github.com/nodezoo/nodezoo-system\">nodezoo-system</a> project.</p>\n\n<h2>\n<a id=\"user-content-microservices\" class=\"anchor\" href=\"#microservices\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Microservices</h2>\n\n<p>The micro-services that make up the system are:</p>\n\n<ul>\n<li>\n<a href=\"http://github.com/nodezoo/nodezoo-web\">nodezoo-web</a>: the web server</li>\n<li>\n<a href=\"http://github.com/nodezoo/nodezoo-info\">nodezoo-info</a>: collect data on modules from multiple sources</li>\n<li>\n<a href=\"http://github.com/nodezoo/nodezoo-search\">nodezoo-search</a>: interface with an elasticsearch server</li>\n<li>\n<a href=\"http://github.com/nodezoo/nodezoo-npm\">nodezoo-npm</a>: interface with the NPM registry</li>\n<li>\n<a href=\"http://github.com/nodezoo/nodezoo-github\">nodezoo-github</a>: interface with github.com</li>\n<li>\n<a href=\"http://github.com/nodezoo/nodezoo-npm-update\">nodezoo-npm-update</a>: get live module updates</li>\n</ul>\n\n<p>Each service should be downloaded and placed in the same folder including this repository.</p>\n\n<h2>\n<a id=\"user-content-iterations\" class=\"anchor\" href=\"#iterations\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Iterations</h2>\n\n<p>The system is built in a set of iterations so that you can follow its\ndevelopment. This mirrors the way that real microservice projects are\ndeveloped. Each iteration, more services are introduced.</p>\n\n<p>When working with the individual microservices, it is easier to open a\nseparate terminal for each one.</p>\n\n<p>Not all microservices are available in all iterations, as some are\nonly introduced later.</p>\n\n<p>Each iterations contains a set of tasks to execute. You should try to\nget them all up and running to verify to yourself that you understand\nthe mechanics of the system.</p>\n\n<p>Each iteration also includes a set of experiments that you can\nattempt. Use these to develop your understanding of the system - there\nare no right answers!</p>\n\n<h2>\n<a id=\"user-content-requirements\" class=\"anchor\" href=\"#requirements\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Requirements</h2>\n\n<p>The basic tools are:</p>\n\n<ul>\n<li><a href=\"http://nodejs.org\">Node.js 4</a></li>\n<li><a href=\"http://docker.com\">Docker 1.8</a></li>\n</ul>\n\n<p>Install these before getting started. Later iterations introduce additional tools, and these will be indicated.</p>\n\n<h3>\n<a id=\"user-content-a-note-on-docker\" class=\"anchor\" href=\"#a-note-on-docker\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>A Note on Docker</h3>\n\n<p>This example only places microservices into containers. All other\nservices (e.g. redis) are run as normal from the host machine. This does not\nprevent you from containerising them of course!</p>\n\n<p>To use the <em>docker</em> command in a terminal, you need to set up the docker environment variables.\nFrom the initial docker terminal (as provided by the docker installation), you can run</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ docker-machine env default</pre></div>\n\n<p>to obtain these environment settings. Copy and paste them into new terminals as needed.</p>\n\n<p>Docker runs containers in a host machine. You use the IP address of this host to access containers.\nThe easiest way to get this IP address is to run the command:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ docker-machine ip default</pre></div>\n\n<p>Finally, from inside docker containers, your microservices will need to talk to the outside world.\nTo do this, they use a special IP address representing your host machine (Host IP). You can obtain this address in multiple ways:</p>\n\n<ul>\n<li>run <code>ifcongig -a</code> and look for the docker or virtualbox entries.</li>\n<li>run <code>docker-machine inspect default | grep HostOnly</code>\n</li>\n</ul>\n\n<p>Docker networking can be tricky, and is fragile with respect to network changes, with DNS, for example, failing.\nWhen wierdness happens, your best bet is to restart:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ docker-machine restart default</pre></div>\n\n<p>This will invalidate your environment, so you will need to launch a new docker terminal.</p>\n\n<h2>\n<a id=\"user-content-how-to-use-this-code\" class=\"anchor\" href=\"#how-to-use-this-code\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>How to use this code</h2>\n\n<p>Each microservice repository has a branch for each iteration: i00, i01, etc.\nYou can clone these branches directly - for example:</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ git clone -b i00 https://github.com/nodezoo/nodezoo-web.git nodezoo-web-i00</pre></div>\n\n<p>However you will not be able to save your changes to your own repositories.</p>\n\n<p>To save your own work, it is better to first fork the repository on github.com, and then</p>\n\n<div class=\"highlight highlight-source-shell\"><pre>$ git clone https://github.com/[YOUR_USER]/nodezoo-web.git\n$ <span class=\"pl-c1\">cd</span> nodezoo-web\n$ git remote add upstream https://github.com/nodezoo/nodezoo-web.git\n$ git fetch upstream\n$ git checkout upstream/i00\n$ git checkout -b i00</pre></div>\n\n<p>This sequence of commands downloads the branch into your local clone of your fork.\nYou can then push your changes back to your own fork.</p>\n\n<p>One you have downloaded all the branches, you can switch between them,\nacross all microservice repositories using the <code>iteration.sh</code> script:</p>\n\n<pre><code>$ ./iteration.sh i00 # moves all to iteration 00\n$ ./iteration.sh i01 # moves all to iteration 01\n... etc.\n</code></pre>\n\n<p>These commands must be used before using the above script, for each branch for the first time :</p>\n\n<pre><code>$ git checkout upstream/[BRANCH NAME]\n$ git checkout -b [BRANCH NAME]\n</code></pre>\n\n<h2>\n<a id=\"user-content-install-your-dependencies\" class=\"anchor\" href=\"#install-your-dependencies\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Install your dependencies</h2>\n\n<p>This script only works once the branch has been fully set-up for a first time.</p>\n\n<p>In each branch, you always need to run the following command:</p>\n\n<pre><code>npm install\n</code></pre>\n\n<p>Then go into the folder nodezoo-workshop/system and run:</p>\n\n<pre><code>npm install\n</code></pre>\n\n<p>to get the dependent Node.js modules.\nThis must be done each time a branch is changed for each micro-service.</p>\n\n<h2>\n<a id=\"user-content-run-build\" class=\"anchor\" href=\"#run-build\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Run build</h2>\n\n<p>In the folder nodezoo-web use the following command :</p>\n\n<pre><code>npm run build\n</code></pre>\n\n<p>IMPORTANT NOTE: the build command is not required on branch i00 - i05</p>\n\n<h2>\n<a id=\"user-content-iteration-00-getting-started\" class=\"anchor\" href=\"#iteration-00-getting-started\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Iteration 00: Getting Started</h2>\n\n<h3>\n<a id=\"user-content-branch-name-i00\" class=\"anchor\" href=\"#branch-name-i00\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Branch name: <code>i00</code>\n</h3>\n\n<p>This branch starts with a simple web server. Use this branch to validate your configuration.</p>\n\n<h3>\n<a id=\"user-content-microservices-1\" class=\"anchor\" href=\"#microservices-1\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>microservices</h3>\n\n<ul>\n<li>\n<em>web</em> (stub)</li>\n</ul>\n\n<h3>\n<a id=\"user-content-tasks\" class=\"anchor\" href=\"#tasks\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>tasks</h3>\n\n<ul>\n<li>Clone the microservice.</li>\n<li>Review code.</li>\n<li>Run in terminal with\n\n<ul>\n<li><code>node srv/app-dev.js --seneca.options.tag=web --seneca.log.all</code></li>\n</ul>\n</li>\n<li>Verify functionality:\n\n<ul>\n<li>Observe the seneca logs to follow the execution of action patterns</li>\n<li>Open http://localhost:8000 - all searches return \"foo\"</li>\n<li>Open http://localhost:8000/info/express - all info is for \"foo\"</li>\n<li>Use the HTTP API:\n\n<ul>\n<li><code>$ curl \"http://localhost:44000/act?role=search&amp;cmd=search&amp;query=express\"</code></li>\n</ul>\n</li>\n<li>Use the repl:\n\n<ul>\n<li><code>$ telnet localhost 43000</code></li>\n<li><code>&gt; seneca.list('role:search')</code></li>\n<li>\n<code>&gt; role:search,cmd:search,query:express</code><br>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Docker image and container: build and run\n\n<ul>\n<li>Open the Dockerfile in a text editor and the commands to use that Dockerfile are in its comments</li>\n<li>The command <code>$ docker build -t TAG-NAME .</code> tells docker to build with the tag TAG-NAME using the Dockerfile in the current directory</li>\n<li>Verify functionality as above, against docker host IP\n\n<ul>\n<li>If Docker cannot connect to the Docker daemon during building use the following command before building:\n<code>$ eval \"$(docker-machine env default)\"</code>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<a id=\"user-content-experiments\" class=\"anchor\" href=\"#experiments\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>experiments</h3>\n\n<ul>\n<li>Learn some <a href=\"http://hapijs.com\">hapi</a>: add some more API end points\n\n<ul>\n<li>how about /api/ping, and respond with the time?</li>\n</ul>\n</li>\n<li>Learn some <a href=\"http://senecajs.org\">seneca</a>: add some more actions, and expose them as API end points\n\n<ul>\n<li>how about /api/ping triggers role:web,cmd:ping, and that responds with the time</li>\n</ul>\n</li>\n<li>The front end is old-school jQuery - how about some <a href=\"http://reactjs.com\">react</a>?</li>\n<li>Setup nginx as a load-balancer with multiple instances of <em>web</em> running\n\n<ul>\n<li>update the configuration to handle port conflicts</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<a id=\"user-content-iteration-01-3-microservices\" class=\"anchor\" href=\"#iteration-01-3-microservices\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Iteration 01: 3 Microservices</h2>\n\n<h3>\n<a id=\"user-content-branch-name-i01\" class=\"anchor\" href=\"#branch-name-i01\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Branch name: <code>i01</code>\n</h3>\n\n<p>This branch introduces two microservices that support the web\nservice. Both are stubs that perform no actual work, instead returning\nhard-coded responses. The focus here is on understanding how simple\nmicroservice communication is configured using static addressing with\nfixed IP addresses and ports.</p>\n\n<h3>\n<a id=\"user-content-microservices-2\" class=\"anchor\" href=\"#microservices-2\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>microservices</h3>\n\n<ul>\n<li><em>web</em></li>\n<li>\n<em>info</em>  (stub)</li>\n<li>\n<em>search</em>  (stub)</li>\n</ul>\n\n<h3>\n<a id=\"user-content-tasks-1\" class=\"anchor\" href=\"#tasks-1\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>tasks</h3>\n\n<ul>\n<li>Clone the microservices.</li>\n<li>Review code for each one - in particular the message transport configuration.</li>\n<li>Run in separate terminals with\n\n<ul>\n<li><code>node srv/app-dev.js --seneca.options.tag=web --seneca.log.all</code></li>\n<li><code>node srv/info-dev.js --seneca.options.tag=info --seneca.log.all</code></li>\n<li><code>node srv/search-dev.js --seneca.options.tag=search --seneca.log.all</code></li>\n</ul>\n</li>\n<li>Verify functionality:\n\n<ul>\n<li>Observe the seneca logs to follow the execution of action patterns</li>\n<li>Open http://localhost:8000 - all searches return \"bar\"</li>\n<li>Open http://localhost:8000/info/express - all info is for \"bar\"</li>\n<li>Use the HTTP API:\n\n<ul>\n<li><code>$ curl \"http://localhost:44000/act?role=search&amp;cmd=search&amp;query=express\"</code></li>\n</ul>\n</li>\n<li>Use the repl of each microservice, and test its action patterns</li>\n</ul>\n</li>\n<li>Build and run the Docker containers, and verify the same functionality</li>\n</ul>\n\n<h3>\n<a id=\"user-content-experiments-1\" class=\"anchor\" href=\"#experiments-1\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>experiments</h3>\n\n<ul>\n<li>Add another microservice\n\n<ul>\n<li>... perhaps ping can live in its own service?</li>\n</ul>\n</li>\n<li>How would you unit test this code?\n\n<ul>\n<li>testing the inbound and outbound messsages for each action is a good place to start</li>\n</ul>\n</li>\n<li>What happens when microservices are down?\n\n<ul>\n<li>Perhaps an auto-restarter like <a href=\"https://github.com/foreverjs/forever\">forever</a> might help</li>\n</ul>\n</li>\n<li>Place the <em>info</em> and/or <em>search</em> microservices behind nginx\n\n<ul>\n<li>and run multiple instances of them - scaling!</li>\n<li>and run multiple versions - fine-grained deployment!\n\n<ul>\n<li>a simple change is to return 'zed' instead of 'bar'</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Seneca lets you merge microservices into one process\n\n<ul>\n<li>just seneca.use each microservice inside <em>web</em>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<a id=\"user-content-iteration-02-real-functionality\" class=\"anchor\" href=\"#iteration-02-real-functionality\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Iteration 02: Real Functionality</h2>\n\n<h3>\n<a id=\"user-content-branch-name-i02\" class=\"anchor\" href=\"#branch-name-i02\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Branch name: <code>i02</code>\n</h3>\n\n<p>This branch introduces infrastructure services that are used by the\nmicroservices to perform work. Elasticsearch is used as a search\nengine, and Redis is used for publish/subscribe messaging. The search\ncan now index and search for Node.js modules, with some manual help.</p>\n\n<h3>\n<a id=\"user-content-prerequisites\" class=\"anchor\" href=\"#prerequisites\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Prerequisites</h3>\n\n<ul>\n<li>Install <a href=\"http://redis.io/\">redis</a> and run in default configuration</li>\n<li>Install <a href=\"https://www.elastic.co/\">elasticsearch</a> and run in default configuration</li>\n<li>Clone the <a href=\"https://github.com/nodezoo/nodezoo-workshop\">nodezoo</a> repository, and build the <em>nodezoo-level</em> container\n\n<ul>\n<li>See folder <code>docker/level</code>; run <code>npm install first</code>\n</li>\n<li>This is necessary, as the <em>seneca-level-store</em> module must compile binaries</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<a id=\"user-content-microservices-3\" class=\"anchor\" href=\"#microservices-3\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>microservices</h3>\n\n<ul>\n<li><em>web</em></li>\n<li><em>info</em></li>\n<li><em>search</em></li>\n<li><em>npm</em></li>\n</ul>\n\n<h3>\n<a id=\"user-content-supporting-services\" class=\"anchor\" href=\"#supporting-services\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>supporting services</h3>\n\n<ul>\n<li><em>redis</em></li>\n<li><em>elasticsearch</em></li>\n</ul>\n\n<h3>\n<a id=\"user-content-tasks-2\" class=\"anchor\" href=\"#tasks-2\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>tasks</h3>\n\n<ul>\n<li>Clone the microservices.</li>\n<li>Review code for each one - in particular the external intergrations.</li>\n<li>Run in separate terminals with\n\n<ul>\n<li><code>node srv/app-dev.js --seneca.options.tag=web --seneca.log.all</code></li>\n<li><code>node srv/info-dev.js --seneca.options.tag=info --seneca.log.all</code></li>\n<li><code>node srv/search-dev.js --seneca.options.tag=search --seneca.log.all</code></li>\n<li><code>node srv/npm-dev.js --seneca.options.tag=npm --seneca.log.all</code></li>\n</ul>\n</li>\n<li>Verify functionality:\n\n<ul>\n<li>Observe the seneca logs to follow the execution of action patterns</li>\n<li>Open http://localhost:8000/info/request - adds <em>request</em> to the search engine\n\n<ul>\n<li>Manually change the module name in the URL to index other modules.</li>\n</ul>\n</li>\n<li>Open http://localhost:8000 - searches now work! Try \"request\".</li>\n<li>Use the HTTP API:\n\n<ul>\n<li><code>$ curl \"http://localhost:44000/act?role=search&amp;cmd=search&amp;query=express\"</code></li>\n</ul>\n</li>\n<li>Use the repl of each microservice, and test its action patterns</li>\n</ul>\n</li>\n<li>Build and run the Docker containers, and verify the same functionality</li>\n</ul>\n\n<h3>\n<a id=\"user-content-experiments-2\" class=\"anchor\" href=\"#experiments-2\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>experiments</h3>\n\n<ul>\n<li>Add another info microservice\n\n<ul>\n<li>copy npm, and then modify</li>\n<li>perhaps it would be useful to know something about the author(s) of the module?</li>\n</ul>\n</li>\n<li>What happens when microservices are down? and what about redis and elasticsearch?</li>\n<li>Can you run multiple copies of <em>npm</em>\n\n<ul>\n<li>what happens?</li>\n</ul>\n</li>\n<li>If you used nginx for scaling, does it still work?</li>\n<li>Elasticsearch might run slow - is there a way to deal with this?\n\n<ul>\n<li>what about a separate caching microservice that sits in front of <em>search</em>?</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<a id=\"user-content-iteration-03-measurement\" class=\"anchor\" href=\"#iteration-03-measurement\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Iteration 03: Measurement</h2>\n\n<h3>\n<a id=\"user-content-branch-name-i03\" class=\"anchor\" href=\"#branch-name-i03\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Branch name: <code>i03</code>\n</h3>\n\n<p>This branch uses influxdb and grafana to chart message flow rates\nthrough the system. Influxdb is used due to it's ease of installation and because it is based on plotting time-series data. Grafana is used because it officially supports influx, and is relatively easy to use.</p>\n\n<h3>\n<a id=\"user-content-prerequisites-1\" class=\"anchor\" href=\"#prerequisites-1\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Prerequisites</h3>\n\n<ul>\n<li>Install <a href=\"https://influxdb.com/\">influxdb</a> and run in default configuration\n\n<ul>\n<li>Start influxdb with <code>$ influxd run</code>\n</li>\n<li>Set up your database by running the console <code>$ influx</code>\n</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"highlight highlight-source-sql\"><pre><span class=\"pl-k\">&gt;</span> CREATE DATABASE seneca_msgstats;\n<span class=\"pl-k\">&gt;</span> CREATE USER msgstats WITH PASSWORD <span class=\"pl-s\"><span class=\"pl-pds\">'</span>msgstats<span class=\"pl-pds\">'</span></span>;\n<span class=\"pl-k\">&gt;</span> <span class=\"pl-k\">GRANT</span> ALL <span class=\"pl-k\">ON</span> seneca_msgstats TO msgstats;</pre></div>\n\n<ul>\n<li>Install <a href=\"http://grafana.org/\">grafana</a> and run in default configuration\n\n<ul>\n<li>You'll need to add your <a href=\"http://docs.grafana.org/datasources/influxdb/\">influxdb</a> as data source and setup a <a href=\"http://docs.grafana.org/guides/gettingstarted/\">dashboard</a>.</li>\n<li>Action flow rates can be obtained using queries of the form:\n\n<ul>\n<li><code>SELECT SUM(c) FROM \"cmd:search,role:search\" WHERE time &gt; now() - 100s GROUP BY time(1s)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>In your clone of the main <em>nodezoo</em> repository, run the msgstats service:\n\n<ul>\n<li>located in the <code>system</code> folder</li>\n<li>\n<code>npm install</code> first as usual</li>\n<li>run with <code>HOST=localhost|host-ip node msgstats.js</code>\n</li>\n<li>use host-ip for docker scenario</li>\n</ul>\n</li>\n<li>You'll need a personal access token for the github.com API\n\n<ul>\n<li>See the menu item under account settings on github.com</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<a id=\"user-content-microservices-4\" class=\"anchor\" href=\"#microservices-4\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>microservices</h3>\n\n<ul>\n<li>\n<em>web</em> (stats)</li>\n<li>\n<em>info</em> (stats)</li>\n<li><em>search</em></li>\n<li><em>npm</em></li>\n<li><em>github</em></li>\n</ul>\n\n<h3>\n<a id=\"user-content-supporting-services-1\" class=\"anchor\" href=\"#supporting-services-1\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>supporting services</h3>\n\n<ul>\n<li><em>redis</em></li>\n<li><em>elasticsearch</em></li>\n<li><em>influxdb</em></li>\n<li><em>grafana</em></li>\n<li><em>msgstats</em></li>\n</ul>\n\n<h3>\n<a id=\"user-content-tasks-3\" class=\"anchor\" href=\"#tasks-3\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>tasks</h3>\n\n<ul>\n<li>Clone the microservices.</li>\n<li>Review code for each one - in particular the message statistics collection.</li>\n<li>Run in separate terminals with\n\n<ul>\n<li><code>node srv/app-dev.js --seneca.options.tag=web --seneca.log.all</code></li>\n<li><code>node srv/info-dev.js --seneca.options.tag=info --seneca.log.all</code></li>\n<li><code>node srv/search-dev.js --seneca.options.tag=search --seneca.log.all</code></li>\n<li><code>node srv/npm-dev.js --seneca.options.tag=npm --seneca.log.all</code></li>\n<li><code>node srv/github-dev.js --seneca.options.tag=npm --seneca.log.all --seneca.options.plugin.github.token=YOUR_GITHUB_TOKEN</code></li>\n</ul>\n</li>\n<li>Verify functionality:\n\n<ul>\n<li>Observe the seneca logs to follow the execution of action patterns</li>\n<li>Use the website, API and repl as before</li>\n</ul>\n</li>\n<li>Verify that message flow rate charts are generated in grafana</li>\n<li>Build and run the Docker containers, and verify the same functionality</li>\n</ul>\n\n<h3>\n<a id=\"user-content-experiments-3\" class=\"anchor\" href=\"#experiments-3\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>experiments</h3>\n\n<ul>\n<li>Write a test script to generate queries via HTTP and then observe the charts\n\n<ul>\n<li>the message flow rates should remain relatively proportional to each other</li>\n</ul>\n</li>\n<li>Write a seneca plugin that induces a failure rate on a given set of messages\n\n<ul>\n<li>read the article on <a href=\"http://senecajs.org/tutorials/understanding-prior-actions.html\">priors</a>\n</li>\n<li>run this on <em>npm</em> and <em>github</em> - does running more instances of these services help?</li>\n</ul>\n</li>\n<li>Can you implement a rate limiter?\n\n<ul>\n<li>Use your test script to overload the system</li>\n<li>Use a plugin to implement the rate limiting</li>\n<li>It's ok to drop excess load on the floor (aka \"load-shedding\")</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<a id=\"user-content-iteration-04-enhancement\" class=\"anchor\" href=\"#iteration-04-enhancement\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Iteration 04: Enhancement</h2>\n\n<h3>\n<a id=\"user-content-branch-name-i04\" class=\"anchor\" href=\"#branch-name-i04\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Branch name: <code>i04</code>\n</h3>\n\n<p>This branch shows the use of a message bus to avoid the high coupling and configuration costs of\ndirect service-to-service communication. This is one way to avoid the need for service discovery\nsolutions.</p>\n\n<h3>\n<a id=\"user-content-prerequisites-2\" class=\"anchor\" href=\"#prerequisites-2\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Prerequisites</h3>\n\n<ul>\n<li>Install <a href=\"http://kr.github.io/beanstalkd/\">beanstalkd</a> and run in default configuration</li>\n</ul>\n\n<h3>\n<a id=\"user-content-microservices-5\" class=\"anchor\" href=\"#microservices-5\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>microservices</h3>\n\n<ul>\n<li>\n<em>web</em> (stats)</li>\n<li>\n<em>info</em> (stats)</li>\n<li><em>search</em></li>\n<li>\n<em>npm</em> (stats)</li>\n<li><em>github</em></li>\n<li>\n<em>update</em> (stats)</li>\n</ul>\n\n<h3>\n<a id=\"user-content-supporting-services-2\" class=\"anchor\" href=\"#supporting-services-2\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>supporting services</h3>\n\n<ul>\n<li><em>redis</em></li>\n<li><em>elasticsearch</em></li>\n<li><em>influxdb</em></li>\n<li><em>grafana</em></li>\n<li><em>msgstats</em></li>\n</ul>\n\n<h3>\n<a id=\"user-content-tasks-4\" class=\"anchor\" href=\"#tasks-4\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>tasks</h3>\n\n<ul>\n<li>Clone the microservices.</li>\n<li>Review code for each one - in particular the npm update event emitter.</li>\n<li>Run in separate terminals with\n\n<ul>\n<li><code>node srv/app-dev.js --seneca.options.tag=web --seneca.log.all</code></li>\n<li><code>node srv/info-dev.js --seneca.options.tag=info --seneca.log.all</code></li>\n<li><code>node srv/search-dev.js --seneca.options.tag=search --seneca.log.all</code></li>\n<li><code>node srv/npm-dev.js --seneca.options.tag=npm --seneca.log.all</code></li>\n<li><code>node srv/github-dev.js --seneca.options.tag=npm --seneca.log.all --seneca.options.plugin.github.token=YOUR_GITHUB_TOKEN</code></li>\n<li><code>node srv/update-dev.js --seneca.options.tag=update --seneca.log.all --seneca.options.plugin.npm_update.task=registry_subscribe</code></li>\n</ul>\n</li>\n<li>Verify functionality:\n\n<ul>\n<li>Observe the seneca logs to follow the execution of action patterns</li>\n<li>Use the website, API and repl as before</li>\n</ul>\n</li>\n<li>Verify that live npm publishes are registered<br>\n</li>\n<li>Verify that message flow rate charts are generated in grafana</li>\n<li>Build and run the Docker containers, and verify the same functionality</li>\n</ul>\n\n<h3>\n<a id=\"user-content-experiments-4\" class=\"anchor\" href=\"#experiments-4\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>experiments</h3>\n\n<ul>\n<li>The npm-update microservice also provides download and batch functionality\n\n<ul>\n<li>experiment with these (look at the source to see the action patterns)</li>\n<li>use the repl to control and observe</li>\n</ul>\n</li>\n<li>In production, how can you ensure that you have all the npm registry data?\n\n<ul>\n<li>which configuration of npm-update instances do you run?</li>\n</ul>\n</li>\n<li>A long time ago, in a galaxy far away, the original nodezoo could calculate \"node rank\", which is just like \"page rank\" only for node modules.\n\n<ul>\n<li><a href=\"https://github.com/nodezoo/nodezoo-workshop/tree/bdd18c030ef32f19e0b28e1f7ed30f80a9854b59/bin\">https://github.com/nodezoo/nodezoo-workshop/tree/bdd18c030ef32f19e0b28e1f7ed30f80a9854b59/bin</a></li>\n<li>Perhaps this can be turned into a batch processing microservice?</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<a id=\"user-content-iteration-05-mesh-networking\" class=\"anchor\" href=\"#iteration-05-mesh-networking\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Iteration 05: Mesh Networking</h3>\n\n<h3>\n<a id=\"user-content-branch-name-i05\" class=\"anchor\" href=\"#branch-name-i05\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Branch name: <code>i05</code>\n</h3>\n\n<p>This branch shows the use of mesh networking to completely remove the need for service discovery.\nThe <a href=\"https://github.com/rjrodger/seneca-mesh\">seneca-mesh</a> plugin uses the <a href=\"http://www.cs.cornell.edu/%7Easdas/research/dsn02-SWIM.pdf\">SWIM gossip algorithm</a>\nto enable microservices to automatically discover the appropriate destinations for messages dynamically.</p>\n\n<h3>\n<a id=\"user-content-prerequisites-3\" class=\"anchor\" href=\"#prerequisites-3\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Prerequisites</h3>\n\n<ul>\n<li>In your clone of the main <em>nodezoo</em> repository, run the base-node service:\n\n<ul>\n<li>located in the <code>system</code> folder</li>\n<li>\n<code>npm install</code> first as usual</li>\n<li>run with <code>node base-node.js</code>\n</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<a id=\"user-content-microservices-6\" class=\"anchor\" href=\"#microservices-6\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>microservices</h3>\n\n<ul>\n<li><em>web</em></li>\n<li><em>info</em></li>\n<li><em>search</em></li>\n<li><em>npm</em></li>\n<li><em>github</em></li>\n<li><em>update</em></li>\n</ul>\n\n<h3>\n<a id=\"user-content-supporting-services-3\" class=\"anchor\" href=\"#supporting-services-3\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>supporting services</h3>\n\n<ul>\n<li><em>influxdb</em></li>\n<li><em>grafana</em></li>\n<li><em>msgstats</em></li>\n<li><em>base-node</em></li>\n</ul>\n\n<h3>\n<a id=\"user-content-tasks-5\" class=\"anchor\" href=\"#tasks-5\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>tasks</h3>\n\n<ul>\n<li>Clone the microservices.</li>\n<li>Review code for each one - in particular the updated service scripts in the <code>srv</code> folders.</li>\n<li>Make sure to run the <em>base-node</em> service <em>before</em> starting the microservices.</li>\n<li>Run in separate terminals with\n\n<ul>\n<li><code>node srv/app-dev.js --seneca.options.tag=web --seneca.log=type:act --seneca.options.debug.short_logs=true</code></li>\n<li><code>node srv/info-dev.js --seneca.options.tag=info --seneca.log=type:act --seneca.options.debug.short_logs=true</code></li>\n<li><code>node srv/search-dev.js --seneca.options.tag=search --seneca.log=type:act --seneca.options.debug.short_logs=true</code></li>\n<li><code>node srv/npm-dev.js --seneca.options.tag=npm --seneca.log=type:act --seneca.options.debug.short_logs=true</code></li>\n<li><code>node srv/npm-github.js --seneca.options.tag=npm --seneca.log=type:act --seneca.options.debug.short_logs=true --seneca.options.plugin.github.token=YOUR_GITHUB_TOKEN</code></li>\n<li><code>node srv/update-dev.js --seneca.options.tag=update --seneca.log=type:act --seneca.options.debug.short_logs=true --seneca.options.plugin.npm_update.task=registry_subscribe</code></li>\n<li>These logging options add a filter to show only actions, and also shorten the logs so they are easier to see for debuggin.</li>\n</ul>\n</li>\n<li>Verify functionality:\n\n<ul>\n<li>Observe the seneca logs to follow the execution of action patterns</li>\n<li>Use the website and API as before.</li>\n</ul>\n</li>\n<li>Verify that live npm publishes are registered<br>\n</li>\n<li>Verify that message flow rate charts are generated in grafana</li>\n<li>Build and run the Docker containers, and verify the same functionality</li>\n</ul>\n\n<h3>\n<a id=\"user-content-experiments-5\" class=\"anchor\" href=\"#experiments-5\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>experiments</h3>\n\n<ul>\n<li>Try stopping and starting services at random.\n\n<ul>\n<li>Observe how the mesh network dynamically reconfigures the microservice message flows.</li>\n</ul>\n</li>\n<li>Try running multiple instances of the <em>search</em> service.\n\n<ul>\n<li>Observe that the <em>web</em> service automatically load balances between the current <em>search</em> services dynamically.</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<a id=\"user-content-contributing\" class=\"anchor\" href=\"#contributing\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Contributing</h2>\n\n<p>The <a href=\"http://www.nodezoo.com/\">NodeZoo org</a> encourages <strong>open</strong> and <strong>safe</strong> participation.</p>\n\n<ul>\n<li><strong><a href=\"https://github.com/nodezoo/nodezoo-org/blob/master/CoC.md\">Code of Conduct</a></strong></li>\n</ul>\n\n<p>If you feel you can help in any way, be it with documentation, examples, extra testing, or new\nfeatures please get in touch.</p>\n\n<h2>\n<a id=\"user-content-license\" class=\"anchor\" href=\"#license\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>License</h2>\n\n<p>Copyright (c) 2014-2016, Richard Rodger and other contributors.\nLicensed under <a href=\"./LICENSE\">MIT</a>.</p>\n","pullRequests":0,"cached":1462291828027,"id":"nodezoo"}}