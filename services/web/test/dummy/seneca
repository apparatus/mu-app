{"npm":{"entity$":"-/-/npm_cache","id":"seneca","name":"seneca","urlRepo":"git+https://github.com/senecajs/seneca.git","urlPkg":"https://www.npmjs.com/package/seneca","description":"A Microservices Framework for Node.js","latestVersion":"2.0.1","releaseCount":52,"dependencies":{"archy":"1.0.0","eraro":"0.4.1","gate-executor":"0.4.0","gex":"0.2.2","jsonic":"0.2.2","lodash":"4.5.0","lru-cache":"4.0.0","minimist":"1.2.0","nid":"0.3.2","norma":"0.3.0","parambulator":"1.5.1","patrun":"0.5.0","rolling-stats":"0.1.1","semver":"5.1.0","seneca-basic":"0.4.0","seneca-cluster":"0.0.1","seneca-mem-store":"0.5.0","seneca-repl":"0.2.0","seneca-transport":"1.2.0","seneca-web":"0.7.1","use-plugin":"0.3.1","zig":"0.1.1"},"author":{"name":"Richard Rodger","email":""},"licence":"MIT","maintainers":[{"name":"matteo.collina","email":"hello@matteocollina.com"},{"name":"mcdonnelldean","email":"mcdonnelldean@outlook.com"},{"name":"naomifeehanmoran","email":"naomi.feehan.moran@gmail.com"},{"name":"rjrodger","email":"richard.rodger@nearform.com"},{"name":"wyatt","email":"wpreul@gmail.com"}],"readme":"![Seneca](http://senecajs.org/files/assets/seneca-logo.png)\n> A Node.js toolkit for Micro-Service Architectures\n\n# seneca\n[![npm version][npm-badge]][npm-url] \n[![Build Status][travis-badge]][travis-url]\n[![Coverage Status][coveralls-badge]][coveralls-url]\n[![Gitter][gitter-badge]][gitter-url]\n\n## About Seneca\n_Seneca_ is a toolkit for organizing the business logic of your app. You can break down your app into \"stuff that happens\", rather than focusing on data models or managing dependencies.\n\n_Seneca_ provides a toolkit for writing micro-services in Node.js.\n\n_Seneca_ provides:\n\n- __pattern matching:__ a wonderfully flexible way to handle business requirements\n\n- __transport independence:__ how messages get to the right server is not something you should have to worry about\n\n- __maturity:__ 5 years in production (before we called it _micro-services_), but was once taken out by [lightning][]\n\n- __plus:__ a deep and wide ecosystem of [plugins][]\n\nUse this module to define commands that work by taking in some JSON, and, optionally, returning some JSON.\nThe command to run is selected by pattern-matching on the the input JSON.\nThere are built-in and optional sets of commands that help you build Minimum Viable Products:\ndata storage, user management, distributed logic, caching, logging, etc.\nAnd you can define your own product by breaking it into a set of commands - \"stuff that happens\".\n\nThat's pretty much it. ;)\n\n## About Seneca Support\n\n- __Node:__ 0.10, 0.12, 4, 5\n\nSeneca's source can be read in an annotated fashion by,\n\n- viewing [online](http://senecajs.org/annotations/seneca.html).\n- running `npm run annotate`\n\nThe annotated source can be found locally at [./doc/seneca.html]().\n\nIf you're using this module, and need help, you can:\n\n- Post a [github issue][],\n- Tweet to [@senecajs][],\n- Ask on the [Gitter][gitter-url].\n\nIf you are new to Seneca in general, please take a look at [senecajs.org][]. We have everything from\ntutorials to sample apps to help get you up and running quickly.\n\n## Install\nTo install, simply use npm.\n\n```\nnpm install seneca\n```\n\n## Test\nTo run tests, simply use npm:\n\n```\nnpm run test\n```\n\n\n## Why we built this?\n\nSo that it doesn't matter,\n\n   * __who__ _provides_ the functionality,\n   * __where__ it _lives_ (on the network),\n   * __what__ it _depends_ on,\n   * it's __easy__ to _define blocks of functionality_ (plugins!).\n\nSo long as _some_ command can handle a given JSON document, you're good.\n\nHere's an example:\n\n```javascript\nvar seneca = require('seneca')()\n\nseneca.add({ cmd: 'salestax' }, function (args, callback) {\n  var rate  = 0.23\n  var total = args.net * (1 + rate)\n  callback(null, { total: total })\n})\n\nseneca.act({ cmd: 'salestax', net: 100 }, function (err, result) {\n  console.log(result.total)\n})\n```\n\nIn this code, whenever seneca sees the pattern\n`{cmd:'salestax'}`, it executes the function associated\nwith this pattern, which calculates sales tax. There is nothing special about the property `cmd` . \nIt is simply the property we want to pattern match. You could look for `foo` for all seneca cares! \n Yah!\n\nThe `seneca.add` method adds a new pattern, and the function to execute whenever that pattern occurs.\n\nThe `seneca.act` method accepts an object, and runs the command, if any, that matches.\n\nWhere does the sales tax rate come from? Let's try it again:\n\n```javascript\nseneca.add({ cmd: 'config' }, function (args, callback) {\n  var config = {\n    rate: 0.23\n  }\n  var value = config[args.prop]\n  callback(null, { value: value })\n})\n\nseneca.add({ cmd: 'salestax' }, function (args, callback) {\n  seneca.act({ cmd: 'config', prop: 'rate' }, function (err, result) {\n    var rate  = parseFloat(result.value)\n    var total = args.net * (1 + rate)\n    callback(null, { total: total })\n  })\n})\n\nseneca.act({ cmd: 'salestax', net: 100 }, function (err, result) {\n  console.log(result.total)\n})\n```\n\nThe `config` command provides you with your configuration. This is\ncool because it doesn't matter _where_ it gets the configuration from\n- hard-coded, file system, database, network service, whatever. Did\nyou have to define an abstraction API to make this work? Nope.\n\nThere's a little but too much verbosity here, don't you think? Let's fix that:\n\n\n```javascript\nseneca.act('cmd:salestax,net:100', function (err, result) {\n  console.log(result.total)\n})\n```\n\nInstead of providing an object, you can provide a string using an\n[abbreviated form of JSON](//github.com/rjrodger/jsonic). In fact, you\ncan provide both:\n\n```javascript\nseneca.act('cmd:salestax', { net: 100 }, function (err, result) {\n  console.log(result.total)\n})\n```\n\nThis is a _very convenient way of combining a pattern and parameter data_.\n\n### Programmer Anarchy\n\nThe way to build Node.js systems, is to build lots of little\nprocesses. Here's a great talk explaining why you should do this:\n[Programmer Anarchy](http://vimeo.com/43690647).\n\nSeneca makes this really easy. Let's put configuration out on the\nnetwork into its own process:\n\n```javascript\nseneca.add({ cmd: 'config' }, function (args, callback) {\n  var config = {\n    rate: 0.23\n  }\n  var value = config[args.prop]\n  callback(null, { value: value })\n})\n\nseneca.listen()\n```\n\nThe `listen` method starts a web server that listens for JSON\nmessages. When these arrive, they are submitted to the local Seneca\ninstance, and executed as actions in the normal way.  The result is\nthen returned to the client as the response to the HTTP\nrequest. Seneca can also listen for actions via a message bus.\n\nYour implementation of the configuration code _stays the same_.\n\nThe client code looks like this:\n\n\n```javascript\nseneca.add({ cmd: 'salestax' }, function (args, callback) {\n  seneca.act({cmd: 'config', prop: 'rate' }, function (err, result) {\n    var rate  = parseFloat(result.value)\n    var total = args.net * (1 + rate)\n    callback(null, { total: total })\n  })\n})\n\nseneca.client()\n\nseneca.act('cmd:salestax,net:100', function (err, result) {\n  console.log(result.total)\n})\n```\n\nOn the client-side, calling `seneca.client()` means that Seneca will\nsend any actions it cannot match locally out over the network. In this\ncase, the configuration server will match the `cmd:config` pattern and\nreturn the configuration data.\n\nAgain, notice that your sales tax code _does not change_. It does not\nneed to know where the configuration comes from, who provides it, or\nhow.\n\nYou can do this with every command.\n\n### Keeping the Business Happy\n\nThe thing about business requirements is that they have no respect for\ncommon sense, logic or orderly structure. The real world is messy.\n\nIn our example, let's say some countries have single sales tax rate,\nand others have a variable rate, which depends either on locality, or product category.\n\nHere's the code. We'll rip out the configuration code for this example.\n\n```javascript\n// fixed rate\nseneca.add({ cmd: 'salestax' }, function (args, callback) {\n  var rate  = 0.23\n  var total = args.net * (1 + rate)\n  callback(null, { total: total })\n})\n\n\n// local rates\nseneca.add({ cmd: 'salestax', country: 'US' }, function (args, callback) {\n  var state = {\n    'NY': 0.04,\n    'CA': 0.0625\n    // ...\n  }\n  var rate = state[args.state]\n  var total = args.net * (1 + rate)\n  callback(null, { total: total })\n})\n\n\n// categories\nseneca.add({ cmd: 'salestax', country: 'IE' }, function (args, callback) {\n  var category = {\n    'top': 0.23,\n    'reduced': 0.135\n    // ...\n  }\n  var rate = category[args.category]\n  var total = args.net * (1 + rate)\n  callback(null, { total: total })\n})\n\n\nseneca.act('cmd:salestax,net:100,country:DE', function (err, result) {\n  console.log('DE: ' + result.total)\n})\n\nseneca.act('cmd:salestax,net:100,country:US,state:NY', function (err, result) {\n  console.log('US,NY: ' + result.total)\n})\n\nseneca.act('cmd:salestax,net:100,country:IE,category:reduced', function (err, result) {\n  console.log('IE: ' + result.total)\n})\n\n```\n\nIn this case, you provide different implementations for different\npatterns. This lets you isolate complexity into well-defined\nplaces. It also means you can deal with special cases very easily.\n\n\n## Examples\n\nFor more examples of Seneca in action, take a look at:\n\n   * [seneca-examples](//github.com/senecajs/getting-started)\n   * [nodezoo.com](//nodezoo.com/#q=seneca)\n   * [Well!](//github.com/nearform/well)\n\n\n## Contributing\nThe [Senecajs org][] __encourages open participation__. If you feel you can help in any way, be it with\nbug reporting, documentation, examples, extra testing, or new features feel free to [create an issue][github issue],\nor better yet, [submit a pull request][github pull request].\n\nWe have 2 main forms of documention for getting started with contributing:\n  - [Our very brief, and to the point, contributing.md](./CONTRIBUTING.md)\n  - [Our much more comprehensive contributing documentation.][contributing]\n\n## License\nCopyright Richard Rodger and other contributors 2015, Licensed under [MIT][].\n\n[travis-badge]: https://travis-ci.org/senecajs/seneca.svg\n[travis-url]: https://travis-ci.org/senecajs/seneca\n[coveralls-badge]: https://coveralls.io/repos/senecajs/seneca/badge.svg?branch=master&service=github\n[coveralls-url]: https://coveralls.io/github/senecajs/seneca?branch=master\n[gitter-badge]: https://badges.gitter.im/Join%20Chat.svg\n[gitter-url]: https://gitter.im/senecajs/seneca\n[npm-badge]: https://badge.fury.io/js/seneca.svg\n[npm-url]: https://badge.fury.io/js/seneca\n\n[MIT]: ./LICENSE\n[Senecajs org]: https://github.com/senecajs/\n[senecajs.org]: http://senecajs.org/\n[github issue]: https://github.com/senecajs/seneca/issues\n[github pull request]: https://github.com/senecajs/seneca/pulls\n[@senecajs]: http://twitter.com/senecajs\n[lightning]: http://aws.amazon.com/message/67457/\n[plugins]: https://github.com/search?utf8=%E2%9C%93&q=seneca&type=Repositories&ref=searchresults\n[contributing]: http://senecajs.org/contribute/\n","homepage":"http://senecajs.org","cached":1462291576074},"name":"seneca","travis":{"entity$":"-/-/travis_cache","name":"seneca","url":"https://travis-ci.org/senecajs/seneca","buildId":376782,"active":true,"buildState":"passed","lastBuilt":"2016-04-29T15:20:21Z","cached":1462291583093,"id":"seneca"},"github":{"entity$":"-/-/github","name":"seneca","user":"senecajs","repo":"seneca","stars":1255,"watches":94,"forks":130,"last":"2016-04-29T15:20:05Z","urlRepo":"https://github.com/senecajs/seneca","urlClone":"git+https://github.com/senecajs/seneca.git","urlSsh":"git@github.com:senecajs/seneca.git","readme":"<p><a href=\"https://camo.githubusercontent.com/4a0178ff2abf26f9214d4d98bc23eec356ced357/687474703a2f2f73656e6563616a732e6f72672f66696c65732f6173736574732f73656e6563612d6c6f676f2e706e67\" target=\"_blank\"><img src=\"https://camo.githubusercontent.com/4a0178ff2abf26f9214d4d98bc23eec356ced357/687474703a2f2f73656e6563616a732e6f72672f66696c65732f6173736574732f73656e6563612d6c6f676f2e706e67\" alt=\"Seneca\" data-canonical-src=\"http://senecajs.org/files/assets/seneca-logo.png\" style=\"max-width:100%;\"></a></p>\n\n<blockquote>\n<p>A Node.js toolkit for Micro-Service Architectures</p>\n</blockquote>\n\n<h1>\n<a id=\"user-content-seneca\" class=\"anchor\" href=\"#seneca\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>seneca</h1>\n\n<p><a href=\"https://badge.fury.io/js/seneca\"><img src=\"https://camo.githubusercontent.com/45ca0dc51730c045ba650c14348ec657b3cddd77/68747470733a2f2f62616467652e667572792e696f2f6a732f73656e6563612e737667\" alt=\"npm version\" data-canonical-src=\"https://badge.fury.io/js/seneca.svg\" style=\"max-width:100%;\"></a> \n<a href=\"https://travis-ci.org/senecajs/seneca\"><img src=\"https://camo.githubusercontent.com/53f4b21666d1e542afa0ed6aa8ed2d5c2a95e0f1/68747470733a2f2f7472617669732d63692e6f72672f73656e6563616a732f73656e6563612e737667\" alt=\"Build Status\" data-canonical-src=\"https://travis-ci.org/senecajs/seneca.svg\" style=\"max-width:100%;\"></a>\n<a href=\"https://coveralls.io/github/senecajs/seneca?branch=master\"><img src=\"https://camo.githubusercontent.com/4bb366f6fc6cf588acf0f1ef48a2bdc14606185e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f73656e6563616a732f73656e6563612f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\" alt=\"Coverage Status\" data-canonical-src=\"https://coveralls.io/repos/senecajs/seneca/badge.svg?branch=master&amp;service=github\" style=\"max-width:100%;\"></a>\n<a href=\"https://gitter.im/senecajs/seneca\"><img src=\"https://camo.githubusercontent.com/da2edb525cde1455a622c58c0effc3a90b9a181c/68747470733a2f2f6261646765732e6769747465722e696d2f4a6f696e253230436861742e737667\" alt=\"Gitter\" data-canonical-src=\"https://badges.gitter.im/Join%20Chat.svg\" style=\"max-width:100%;\"></a></p>\n\n<h2>\n<a id=\"user-content-about-seneca\" class=\"anchor\" href=\"#about-seneca\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>About Seneca</h2>\n\n<p><em>Seneca</em> is a toolkit for organizing the business logic of your app. You can break down your app into \"stuff that happens\", rather than focusing on data models or managing dependencies.</p>\n\n<p><em>Seneca</em> provides a toolkit for writing micro-services in Node.js.</p>\n\n<p><em>Seneca</em> provides:</p>\n\n<ul>\n<li><p><strong>pattern matching:</strong> a wonderfully flexible way to handle business requirements</p></li>\n<li><p><strong>transport independence:</strong> how messages get to the right server is not something you should have to worry about</p></li>\n<li><p><strong>maturity:</strong> 5 years in production (before we called it <em>micro-services</em>), but was once taken out by <a href=\"http://aws.amazon.com/message/67457/\">lightning</a></p></li>\n<li><p><strong>plus:</strong> a deep and wide ecosystem of <a href=\"https://github.com/search?utf8=%E2%9C%93&amp;q=seneca&amp;type=Repositories&amp;ref=searchresults\">plugins</a></p></li>\n</ul>\n\n<p>Use this module to define commands that work by taking in some JSON, and, optionally, returning some JSON.\nThe command to run is selected by pattern-matching on the the input JSON.\nThere are built-in and optional sets of commands that help you build Minimum Viable Products:\ndata storage, user management, distributed logic, caching, logging, etc.\nAnd you can define your own product by breaking it into a set of commands - \"stuff that happens\".</p>\n\n<p>That's pretty much it. ;)</p>\n\n<h2>\n<a id=\"user-content-about-seneca-support\" class=\"anchor\" href=\"#about-seneca-support\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>About Seneca Support</h2>\n\n<ul>\n<li>\n<strong>Node:</strong> 0.10, 0.12, 4, 5</li>\n</ul>\n\n<p>Seneca's source can be read in an annotated fashion by,</p>\n\n<ul>\n<li>viewing <a href=\"http://senecajs.org/annotations/seneca.html\">online</a>.</li>\n<li>running <code>npm run annotate</code>\n</li>\n</ul>\n\n<p>The annotated source can be found locally at <a href=\"\">./doc/seneca.html</a>.</p>\n\n<p>If you're using this module, and need help, you can:</p>\n\n<ul>\n<li>Post a <a href=\"https://github.com/senecajs/seneca/issues\">github issue</a>,</li>\n<li>Tweet to <a href=\"http://twitter.com/senecajs\">@senecajs</a>,</li>\n<li>Ask on the <a href=\"https://gitter.im/senecajs/seneca\">Gitter</a>.</li>\n</ul>\n\n<p>If you are new to Seneca in general, please take a look at <a href=\"http://senecajs.org/\">senecajs.org</a>. We have everything from\ntutorials to sample apps to help get you up and running quickly.</p>\n\n<h2>\n<a id=\"user-content-install\" class=\"anchor\" href=\"#install\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Install</h2>\n\n<p>To install, simply use npm.</p>\n\n<pre><code>npm install seneca\n</code></pre>\n\n<h2>\n<a id=\"user-content-test\" class=\"anchor\" href=\"#test\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Test</h2>\n\n<p>To run tests, simply use npm:</p>\n\n<pre><code>npm run test\n</code></pre>\n\n<h2>\n<a id=\"user-content-why-we-built-this\" class=\"anchor\" href=\"#why-we-built-this\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Why we built this?</h2>\n\n<p>So that it doesn't matter,</p>\n\n<ul>\n<li>\n<strong>who</strong> <em>provides</em> the functionality,</li>\n<li>\n<strong>where</strong> it <em>lives</em> (on the network),</li>\n<li>\n<strong>what</strong> it <em>depends</em> on,</li>\n<li>it's <strong>easy</strong> to <em>define blocks of functionality</em> (plugins!).</li>\n</ul>\n\n<p>So long as <em>some</em> command can handle a given JSON document, you're good.</p>\n\n<p>Here's an example:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-k\">var</span> seneca <span class=\"pl-k\">=</span> <span class=\"pl-c1\">require</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>seneca<span class=\"pl-pds\">'</span></span>)()\n\n<span class=\"pl-smi\">seneca</span>.<span class=\"pl-c1\">add</span>({ cmd<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>salestax<span class=\"pl-pds\">'</span></span> }, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">args</span>, <span class=\"pl-smi\">callback</span>) {\n  <span class=\"pl-k\">var</span> rate  <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.23</span>\n  <span class=\"pl-k\">var</span> total <span class=\"pl-k\">=</span> <span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">net</span> <span class=\"pl-k\">*</span> (<span class=\"pl-c1\">1</span> <span class=\"pl-k\">+</span> rate)\n  <span class=\"pl-en\">callback</span>(<span class=\"pl-c1\">null</span>, { total<span class=\"pl-k\">:</span> total })\n})\n\n<span class=\"pl-smi\">seneca</span>.<span class=\"pl-en\">act</span>({ cmd<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>salestax<span class=\"pl-pds\">'</span></span>, net<span class=\"pl-k\">:</span> <span class=\"pl-c1\">100</span> }, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">err</span>, <span class=\"pl-smi\">result</span>) {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">result</span>.<span class=\"pl-smi\">total</span>)\n})</pre></div>\n\n<p>In this code, whenever seneca sees the pattern\n<code>{cmd:'salestax'}</code>, it executes the function associated\nwith this pattern, which calculates sales tax. There is nothing special about the property <code>cmd</code> . \nIt is simply the property we want to pattern match. You could look for <code>foo</code> for all seneca cares! \n Yah!</p>\n\n<p>The <code>seneca.add</code> method adds a new pattern, and the function to execute whenever that pattern occurs.</p>\n\n<p>The <code>seneca.act</code> method accepts an object, and runs the command, if any, that matches.</p>\n\n<p>Where does the sales tax rate come from? Let's try it again:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">seneca</span>.<span class=\"pl-c1\">add</span>({ cmd<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>config<span class=\"pl-pds\">'</span></span> }, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">args</span>, <span class=\"pl-smi\">callback</span>) {\n  <span class=\"pl-k\">var</span> config <span class=\"pl-k\">=</span> {\n    rate<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0.23</span>\n  }\n  <span class=\"pl-k\">var</span> value <span class=\"pl-k\">=</span> config[<span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">prop</span>]\n  <span class=\"pl-en\">callback</span>(<span class=\"pl-c1\">null</span>, { value<span class=\"pl-k\">:</span> value })\n})\n\n<span class=\"pl-smi\">seneca</span>.<span class=\"pl-c1\">add</span>({ cmd<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>salestax<span class=\"pl-pds\">'</span></span> }, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">args</span>, <span class=\"pl-smi\">callback</span>) {\n  <span class=\"pl-smi\">seneca</span>.<span class=\"pl-en\">act</span>({ cmd<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>config<span class=\"pl-pds\">'</span></span>, prop<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>rate<span class=\"pl-pds\">'</span></span> }, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">err</span>, <span class=\"pl-smi\">result</span>) {\n    <span class=\"pl-k\">var</span> rate  <span class=\"pl-k\">=</span> <span class=\"pl-c1\">parseFloat</span>(<span class=\"pl-smi\">result</span>.<span class=\"pl-c1\">value</span>)\n    <span class=\"pl-k\">var</span> total <span class=\"pl-k\">=</span> <span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">net</span> <span class=\"pl-k\">*</span> (<span class=\"pl-c1\">1</span> <span class=\"pl-k\">+</span> rate)\n    <span class=\"pl-en\">callback</span>(<span class=\"pl-c1\">null</span>, { total<span class=\"pl-k\">:</span> total })\n  })\n})\n\n<span class=\"pl-smi\">seneca</span>.<span class=\"pl-en\">act</span>({ cmd<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>salestax<span class=\"pl-pds\">'</span></span>, net<span class=\"pl-k\">:</span> <span class=\"pl-c1\">100</span> }, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">err</span>, <span class=\"pl-smi\">result</span>) {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">result</span>.<span class=\"pl-smi\">total</span>)\n})</pre></div>\n\n<p>The <code>config</code> command provides you with your configuration. This is\ncool because it doesn't matter <em>where</em> it gets the configuration from</p>\n\n<ul>\n<li>hard-coded, file system, database, network service, whatever. Did\nyou have to define an abstraction API to make this work? Nope.</li>\n</ul>\n\n<p>There's a little but too much verbosity here, don't you think? Let's fix that:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">seneca</span>.<span class=\"pl-en\">act</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>cmd:salestax,net:100<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">err</span>, <span class=\"pl-smi\">result</span>) {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">result</span>.<span class=\"pl-smi\">total</span>)\n})</pre></div>\n\n<p>Instead of providing an object, you can provide a string using an\n<a href=\"//github.com/rjrodger/jsonic\">abbreviated form of JSON</a>. In fact, you\ncan provide both:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">seneca</span>.<span class=\"pl-en\">act</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>cmd:salestax<span class=\"pl-pds\">'</span></span>, { net<span class=\"pl-k\">:</span> <span class=\"pl-c1\">100</span> }, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">err</span>, <span class=\"pl-smi\">result</span>) {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">result</span>.<span class=\"pl-smi\">total</span>)\n})</pre></div>\n\n<p>This is a <em>very convenient way of combining a pattern and parameter data</em>.</p>\n\n<h3>\n<a id=\"user-content-programmer-anarchy\" class=\"anchor\" href=\"#programmer-anarchy\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Programmer Anarchy</h3>\n\n<p>The way to build Node.js systems, is to build lots of little\nprocesses. Here's a great talk explaining why you should do this:\n<a href=\"http://vimeo.com/43690647\">Programmer Anarchy</a>.</p>\n\n<p>Seneca makes this really easy. Let's put configuration out on the\nnetwork into its own process:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">seneca</span>.<span class=\"pl-c1\">add</span>({ cmd<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>config<span class=\"pl-pds\">'</span></span> }, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">args</span>, <span class=\"pl-smi\">callback</span>) {\n  <span class=\"pl-k\">var</span> config <span class=\"pl-k\">=</span> {\n    rate<span class=\"pl-k\">:</span> <span class=\"pl-c1\">0.23</span>\n  }\n  <span class=\"pl-k\">var</span> value <span class=\"pl-k\">=</span> config[<span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">prop</span>]\n  <span class=\"pl-en\">callback</span>(<span class=\"pl-c1\">null</span>, { value<span class=\"pl-k\">:</span> value })\n})\n\n<span class=\"pl-smi\">seneca</span>.<span class=\"pl-en\">listen</span>()</pre></div>\n\n<p>The <code>listen</code> method starts a web server that listens for JSON\nmessages. When these arrive, they are submitted to the local Seneca\ninstance, and executed as actions in the normal way.  The result is\nthen returned to the client as the response to the HTTP\nrequest. Seneca can also listen for actions via a message bus.</p>\n\n<p>Your implementation of the configuration code <em>stays the same</em>.</p>\n\n<p>The client code looks like this:</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">seneca</span>.<span class=\"pl-c1\">add</span>({ cmd<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>salestax<span class=\"pl-pds\">'</span></span> }, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">args</span>, <span class=\"pl-smi\">callback</span>) {\n  <span class=\"pl-smi\">seneca</span>.<span class=\"pl-en\">act</span>({cmd<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>config<span class=\"pl-pds\">'</span></span>, prop<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>rate<span class=\"pl-pds\">'</span></span> }, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">err</span>, <span class=\"pl-smi\">result</span>) {\n    <span class=\"pl-k\">var</span> rate  <span class=\"pl-k\">=</span> <span class=\"pl-c1\">parseFloat</span>(<span class=\"pl-smi\">result</span>.<span class=\"pl-c1\">value</span>)\n    <span class=\"pl-k\">var</span> total <span class=\"pl-k\">=</span> <span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">net</span> <span class=\"pl-k\">*</span> (<span class=\"pl-c1\">1</span> <span class=\"pl-k\">+</span> rate)\n    <span class=\"pl-en\">callback</span>(<span class=\"pl-c1\">null</span>, { total<span class=\"pl-k\">:</span> total })\n  })\n})\n\n<span class=\"pl-smi\">seneca</span>.<span class=\"pl-en\">client</span>()\n\n<span class=\"pl-smi\">seneca</span>.<span class=\"pl-en\">act</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>cmd:salestax,net:100<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">err</span>, <span class=\"pl-smi\">result</span>) {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-smi\">result</span>.<span class=\"pl-smi\">total</span>)\n})</pre></div>\n\n<p>On the client-side, calling <code>seneca.client()</code> means that Seneca will\nsend any actions it cannot match locally out over the network. In this\ncase, the configuration server will match the <code>cmd:config</code> pattern and\nreturn the configuration data.</p>\n\n<p>Again, notice that your sales tax code <em>does not change</em>. It does not\nneed to know where the configuration comes from, who provides it, or\nhow.</p>\n\n<p>You can do this with every command.</p>\n\n<h3>\n<a id=\"user-content-keeping-the-business-happy\" class=\"anchor\" href=\"#keeping-the-business-happy\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Keeping the Business Happy</h3>\n\n<p>The thing about business requirements is that they have no respect for\ncommon sense, logic or orderly structure. The real world is messy.</p>\n\n<p>In our example, let's say some countries have single sales tax rate,\nand others have a variable rate, which depends either on locality, or product category.</p>\n\n<p>Here's the code. We'll rip out the configuration code for this example.</p>\n\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-c\">// fixed rate</span>\n<span class=\"pl-smi\">seneca</span>.<span class=\"pl-c1\">add</span>({ cmd<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>salestax<span class=\"pl-pds\">'</span></span> }, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">args</span>, <span class=\"pl-smi\">callback</span>) {\n  <span class=\"pl-k\">var</span> rate  <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0.23</span>\n  <span class=\"pl-k\">var</span> total <span class=\"pl-k\">=</span> <span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">net</span> <span class=\"pl-k\">*</span> (<span class=\"pl-c1\">1</span> <span class=\"pl-k\">+</span> rate)\n  <span class=\"pl-en\">callback</span>(<span class=\"pl-c1\">null</span>, { total<span class=\"pl-k\">:</span> total })\n})\n\n\n<span class=\"pl-c\">// local rates</span>\n<span class=\"pl-smi\">seneca</span>.<span class=\"pl-c1\">add</span>({ cmd<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>salestax<span class=\"pl-pds\">'</span></span>, country<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>US<span class=\"pl-pds\">'</span></span> }, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">args</span>, <span class=\"pl-smi\">callback</span>) {\n  <span class=\"pl-k\">var</span> state <span class=\"pl-k\">=</span> {\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>NY<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">0.04</span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>CA<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">0.0625</span>\n    <span class=\"pl-c\">// ...</span>\n  }\n  <span class=\"pl-k\">var</span> rate <span class=\"pl-k\">=</span> state[<span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">state</span>]\n  <span class=\"pl-k\">var</span> total <span class=\"pl-k\">=</span> <span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">net</span> <span class=\"pl-k\">*</span> (<span class=\"pl-c1\">1</span> <span class=\"pl-k\">+</span> rate)\n  <span class=\"pl-en\">callback</span>(<span class=\"pl-c1\">null</span>, { total<span class=\"pl-k\">:</span> total })\n})\n\n\n<span class=\"pl-c\">// categories</span>\n<span class=\"pl-smi\">seneca</span>.<span class=\"pl-c1\">add</span>({ cmd<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>salestax<span class=\"pl-pds\">'</span></span>, country<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>IE<span class=\"pl-pds\">'</span></span> }, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">args</span>, <span class=\"pl-smi\">callback</span>) {\n  <span class=\"pl-k\">var</span> category <span class=\"pl-k\">=</span> {\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>top<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">0.23</span>,\n    <span class=\"pl-s\"><span class=\"pl-pds\">'</span>reduced<span class=\"pl-pds\">'</span></span><span class=\"pl-k\">:</span> <span class=\"pl-c1\">0.135</span>\n    <span class=\"pl-c\">// ...</span>\n  }\n  <span class=\"pl-k\">var</span> rate <span class=\"pl-k\">=</span> category[<span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">category</span>]\n  <span class=\"pl-k\">var</span> total <span class=\"pl-k\">=</span> <span class=\"pl-smi\">args</span>.<span class=\"pl-smi\">net</span> <span class=\"pl-k\">*</span> (<span class=\"pl-c1\">1</span> <span class=\"pl-k\">+</span> rate)\n  <span class=\"pl-en\">callback</span>(<span class=\"pl-c1\">null</span>, { total<span class=\"pl-k\">:</span> total })\n})\n\n\n<span class=\"pl-smi\">seneca</span>.<span class=\"pl-en\">act</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>cmd:salestax,net:100,country:DE<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">err</span>, <span class=\"pl-smi\">result</span>) {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>DE: <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">result</span>.<span class=\"pl-smi\">total</span>)\n})\n\n<span class=\"pl-smi\">seneca</span>.<span class=\"pl-en\">act</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>cmd:salestax,net:100,country:US,state:NY<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">err</span>, <span class=\"pl-smi\">result</span>) {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>US,NY: <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">result</span>.<span class=\"pl-smi\">total</span>)\n})\n\n<span class=\"pl-smi\">seneca</span>.<span class=\"pl-en\">act</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>cmd:salestax,net:100,country:IE,category:reduced<span class=\"pl-pds\">'</span></span>, <span class=\"pl-k\">function</span> (<span class=\"pl-smi\">err</span>, <span class=\"pl-smi\">result</span>) {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>IE: <span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">result</span>.<span class=\"pl-smi\">total</span>)\n})\n</pre></div>\n\n<p>In this case, you provide different implementations for different\npatterns. This lets you isolate complexity into well-defined\nplaces. It also means you can deal with special cases very easily.</p>\n\n<h2>\n<a id=\"user-content-examples\" class=\"anchor\" href=\"#examples\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Examples</h2>\n\n<p>For more examples of Seneca in action, take a look at:</p>\n\n<ul>\n<li><a href=\"//github.com/senecajs/getting-started\">seneca-examples</a></li>\n<li><a href=\"//nodezoo.com/#q=seneca\">nodezoo.com</a></li>\n<li><a href=\"//github.com/nearform/well\">Well!</a></li>\n</ul>\n\n<h2>\n<a id=\"user-content-contributing\" class=\"anchor\" href=\"#contributing\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Contributing</h2>\n\n<p>The <a href=\"https://github.com/senecajs/\">Senecajs org</a> <strong>encourages open participation</strong>. If you feel you can help in any way, be it with\nbug reporting, documentation, examples, extra testing, or new features feel free to <a href=\"https://github.com/senecajs/seneca/issues\">create an issue</a>,\nor better yet, <a href=\"https://github.com/senecajs/seneca/pulls\">submit a pull request</a>.</p>\n\n<p>We have 2 main forms of documention for getting started with contributing:</p>\n\n<ul>\n<li><a href=\"./CONTRIBUTING.md\">Our very brief, and to the point, contributing.md</a></li>\n<li><a href=\"http://senecajs.org/contribute/\">Our much more comprehensive contributing documentation.</a></li>\n</ul>\n\n<h2>\n<a id=\"user-content-license\" class=\"anchor\" href=\"#license\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>License</h2>\n\n<p>Copyright Richard Rodger and other contributors 2015, Licensed under <a href=\"./LICENSE\">MIT</a>.</p>\n","pullRequests":1,"cached":1462291582606,"id":"seneca"}}